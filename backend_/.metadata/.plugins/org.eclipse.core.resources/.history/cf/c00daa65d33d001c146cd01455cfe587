package com.alcancia.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.validation.ConstraintViolationException;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.TransactionSystemException;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alcancia.dto.TipoMonedaDto;
import com.alcancia.entity.TipoMoneda;
import com.alcancia.service.TipoMonedaService;
import com.alcancia.utils.ErrorsFuntions;


@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/tipomoneda")
public class TipoMonedaController {
	
	@Autowired
	private TipoMonedaService service;
	
	public static final String FAILED = "Failed to search client from database!";
	public static final String NOT_FOUND = "No se encontro registro de la información del tipo de moneda en el sistema.";
	public static final String IM_USED_NOM = "Ya existe un nombre del tipo de moneda registrado anteriormente.";

	@GetMapping("/")
	public ResponseEntity<?> list() {
		try {
			Iterable<TipoMoneda> list = service.findAll();
			return ResponseEntity.status(HttpStatus.OK).body(list);
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessage(e, FAILED);
		}
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<?> detail(@PathVariable Long id) {
		Optional<TipoMoneda> entity = Optional.empty();
		try {
			entity = service.findById(id);
			if (entity.isEmpty()) {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(NOT_FOUND);
			}
			return ResponseEntity.status(HttpStatus.OK).body(entity.get());
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessage(e, FAILED);
		}
	}
	
	@PostMapping("/")
    public ResponseEntity<?> save(@Valid @RequestBody TipoMonedaDto tipomonedaDto, BindingResult result) {

        if (result.hasErrors()) {
            return this.validates(result);
        }
        
        if (service.existsByNombre(tipomonedaDto.getNombre().toUpperCase())) {
			return ResponseEntity.status(HttpStatus.IM_USED).body(IM_USED_NOM);
		}

        TipoMoneda tipomoneda = new TipoMoneda();
        tipomoneda.setNombre(tipomonedaDto.getNombre().toUpperCase());

        try {
        	TipoMoneda entityDb = service.save(tipomoneda);
			return ResponseEntity.status(HttpStatus.CREATED).body(entityDb);
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessageSave(e.getMostSpecificCause().getMessage());
		}
    }


    @PutMapping("/{id}")
    public ResponseEntity<?> update(@Valid @RequestBody TipoMonedaDto tipomonedaDto, BindingResult result, @PathVariable Long id) {

        if (result.hasErrors()) {
            return this.validates(result);
        }

        Optional<TipoMoneda> objectTipoMoneda = service.findById(id);
        if (objectTipoMoneda.isEmpty()) {
        	return ResponseEntity.status(HttpStatus.NOT_FOUND).body(NOT_FOUND);
        }
        
        if (service.existsByNombre(tipomonedaDto.getNombre().toUpperCase())) {
			Optional<TipoMoneda> tipoMonedaCon = service.findByNombre(tipomonedaDto.getNombre().toUpperCase());
			if (!tipoMonedaCon.isEmpty()) {
				Long idEjemplo = tipoMonedaCon.get().getId();
				if (!idEjemplo.equals(id)) {
					return ResponseEntity.status(HttpStatus.IM_USED).body(IM_USED_NOM);
				}
			}
		}

        List<Object> newList = isUpdatable(tipomonedaDto, objectTipoMoneda);
        if (newList.isEmpty()) {
        	return ResponseEntity.status(HttpStatus.NOT_MODIFIED).body("No se realizó ningún cambio en la información del tipode moneda.");
        }

        TipoMoneda tipomonedaDb = objectTipoMoneda.get();
        tipomonedaDb.setNombre(tipomonedaDto.getNombre());

        try {
        	TipoMoneda entityDb = service.save(tipomonedaDb);
			return ResponseEntity.status(HttpStatus.CREATED).body(entityDb);
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessageSave(e.getMostSpecificCause().getMessage());
		} catch (TransactionSystemException e) {
			if (e.getRootCause() instanceof ConstraintViolationException) {
		        ConstraintViolationException cve = (ConstraintViolationException) e.getRootCause();
		        return ErrorsFuntions.errorConstraint(cve);
		    }
		    return null;
		}
    }
    
    @DeleteMapping("/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id) {
		try {
			Optional<TipoMoneda> entity = service.findById(id);
			if (entity.isEmpty()) {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(NOT_FOUND);
			}
			service.deleteById(id);
			return ResponseEntity.status(HttpStatus.OK).body("Información eliminada correctamente.");
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessage(e, FAILED);
		}
	}


    private List<Object> isUpdatable(TipoMonedaDto tipomonedaDto, Optional<TipoMoneda> objectTipoMoneda) {
        List<Object> newList = new ArrayList<>();
        List<Object> dto = new ArrayList<>();
        List<Object> model = new ArrayList<>();

        dto.add(tipomonedaDto.getNombre());

        if (!objectTipoMoneda.isEmpty()) {
            model.add(objectTipoMoneda.get().getNombre());
        }

        for (Object element : model) {
            if (!dto.contains(element)) {
                newList.add(element);
            }
        }
        return newList;
    }
    
    protected ResponseEntity<?> validates(BindingResult result) {
		Map<String, Object> errores = new HashMap<>();
			result.getFieldErrors().forEach(err -> errores.put(err.getField(), "El campo " + err.getField() + " " + err.getDefaultMessage() )
		);
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errores);
	}

}
