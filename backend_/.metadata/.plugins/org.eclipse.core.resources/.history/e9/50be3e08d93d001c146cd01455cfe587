package com.alcancia.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GettMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ps.ms.commons.controller.CommonController;
import com.alcancia.dto.AlcanciaDto;
import com.alcancia.entity.Alcancia;
import com.alcancia.service.IAlcanciaService;
import utils.constants.CommonControllerConstans;
import utils.funtions.CommonsFuntions;
import utils.funtions.MessagesFunctions;

@RestController
@RequestMapping("/alcancia")
public class AlcanciaController extends CommonController<Alcancia, IAlcanciaService>  {

    @PostMapping("/")
    public ResponseEntity<?> savee(@Valid @RequestBody AlcanciaDto alcanciaDto, BindingResult result) {

        if (result.hasErrors()) {
            return this.validates(result);
        }

        Alcancia alcancia = new Alcancia();
        alcancia.setIdTipomoneda(alcanciaDto.getIdTipomoneda());

        return super.save(alcancia);
    }


    @PutMapping("/{id}")
    public ResponseEntity<?> updatee(@Valid @RequestBody AlcanciaDto alcanciaDto, BindingResult result, @PathVariable Long id) {

        if (result.hasErrors()) {
            return this.validates(result);
        }

        Optional<Alcancia> objectAlcancia = service.findById(id);
        if (objectAlcancia.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(MessagesFunctions.notFound("del alcancia"));
        }

        List<Object> newList = isUpdatable(alcanciaDto, objectAlcancia);
        if (newList.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_MODIFIED).body(MessagesFunctions.notModified("del alcancia"));
        }

        Alcancia alcanciaDb = objectAlcancia.get();
        alcanciaDb.setIdTipomoneda(alcanciaDto.getIdTipomoneda());

        return super.update(alcanciaDb);
    }


    private List<Object> isUpdatable(AlcanciaDto alcanciaDto, Optional<Alcancia> objectAlcancia) {
        List<Object> newList = new ArrayList<>();
        List<Object> dto = new ArrayList<>();
        List<Object> model = new ArrayList<>();

        dto.add(alcanciaDto.getIdTipomoneda());

        if (!objectAlcancia.isEmpty()) {
            model.add(objectAlcancia.get().getIdTipomoneda());
        }

        for (Object element : model) {
            if (!dto.contains(element)) {
                newList.add(element);
            }
        }
        return newList;
    }

}
