package com.alcancia.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.validation.ConstraintViolationException;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.TransactionSystemException;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alcancia.dto.AlcanciaDto;
import com.alcancia.entity.Alcancia;
import com.alcancia.service.AlcanciaService;
import com.alcancia.utils.ErrorsFuntions;

@RestController
@RequestMapping("/alcancia")
public class AlcanciaController {
	
	@Autowired
	private AlcanciaService service;
	
	public static final String FAILED = "Failed to search client from database!";
	public static final String NOT_FOUND = "No se encontro registro de la información de la alcancia en el sistema.";

	@GetMapping("/")
	public ResponseEntity<?> list() {
		try {
			Iterable<Alcancia> list = service.findAll();
			return ResponseEntity.status(HttpStatus.OK).body(list);
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessage(e, FAILED);
		}
	}
	
	@PostMapping("/")
    public ResponseEntity<?> save(@Valid @RequestBody AlcanciaDto alcanciaDto, BindingResult result) {

        if (result.hasErrors()) {
            return this.validates(result);
        }

        Alcancia alcancia = new Alcancia();
        alcancia.setIdTipomoneda(alcanciaDto.getIdTipomoneda());
        
        try {
        	Alcancia entityDb = service.save(alcancia);
			return ResponseEntity.status(HttpStatus.CREATED).body(entityDb);
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessageSave(e.getMostSpecificCause().getMessage());
		}

    }


    @PutMapping("/{id}")
    public ResponseEntity<?> update(@Valid @RequestBody AlcanciaDto alcanciaDto, BindingResult result, @PathVariable Long id) {

        if (result.hasErrors()) {
            return this.validates(result);
        }

        Optional<Alcancia> objectAlcancia = service.findById(id);
        if (objectAlcancia.isEmpty()) {
        	return ResponseEntity.status(HttpStatus.NOT_MODIFIED).body("No se realizó ningún cambio en la información de la alcancia.");
        }

        Alcancia alcanciaDb = objectAlcancia.get();
        alcanciaDb.setIdTipomoneda(alcanciaDto.getIdTipomoneda());
        
        try {
        	Alcancia entityDb = service.save(alcanciaDb);
			return ResponseEntity.status(HttpStatus.CREATED).body(entityDb);
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessageSave(e.getMostSpecificCause().getMessage());
		} catch (TransactionSystemException e) {
			if (e.getRootCause() instanceof ConstraintViolationException) {
		        ConstraintViolationException cve = (ConstraintViolationException) e.getRootCause();
		        return ErrorsFuntions.errorConstraint(cve);
		    }
		    return null;
		}

    }


    protected ResponseEntity<?> validates(BindingResult result) {
		Map<String, Object> errores = new HashMap<>();
			result.getFieldErrors().forEach(err -> errores.put(err.getField(), "El campo " + err.getField() + " " + err.getDefaultMessage() )
		);
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errores);
	}

}
