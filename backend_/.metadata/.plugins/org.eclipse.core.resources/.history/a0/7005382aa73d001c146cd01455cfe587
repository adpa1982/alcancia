package com.alcancia.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.GettMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alcancia.dto.TipoMonedaDto;
import com.alcancia.entity.Ejemplo;
import com.alcancia.entity.TipoMoneda;
import com.alcancia.service.EjemploService;
import com.alcancia.service.ITipoMonedaService;
import com.alcancia.service.TipoMonedaService;
import com.alcancia.utils.ErrorsFuntions;


@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/tipomoneda")
public class TipoMonedaController {
	
	@Autowired
	private TipoMonedaService service;
	
	public static final String FAILED = "Failed to search client from database!";
	public static final String NOT_FOUND = "No se encontro registro de la información del ejemplo en el sistema.";
	public static final String IM_USED_COD = "Ya existe un código de ejemplo registrado anteriormente.";
	public static final String IM_USED_NOM = "Ya existe un nombre de ejemplo registrado anteriormente.";

	@GetMapping("/")
	public ResponseEntity<?> list() {
		try {
			Iterable<Ejemplo> list = service.findAll();
			return ResponseEntity.status(HttpStatus.OK).body(list);
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessage(e, FAILED);
		}
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<?> detail(@PathVariable Long id) {
		Optional<Ejemplo> entity = Optional.empty();
		try {
			entity = service.findById(id);
			if (entity.isEmpty()) {
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(NOT_FOUND);
			}
			return ResponseEntity.status(HttpStatus.OK).body(entity.get());
		} catch (DataAccessException e) {
			return ErrorsFuntions.errorMessage(e, FAILED);
		}
	}
	
	@PostMapping("/")
    public ResponseEntity<?> savee(@Valid @RequestBody TipoMonedaDto tipomonedaDto, BindingResult result) {

        if (result.hasErrors()) {
            return this.validates(result);
        }

        TipoMoneda tipomoneda = new TipoMoneda();
        tipomoneda.setNombre(tipomonedaDto.getNombre());

        return super.save(tipomoneda);
    }


    @PutMapping("/{id}")
    public ResponseEntity<?> updatee(@Valid @RequestBody TipoMonedaDto tipomonedaDto, BindingResult result, @PathVariable Long id) {

        if (result.hasErrors()) {
            return this.validates(result);
        }

        Optional<TipoMoneda> objectTipoMoneda = service.findById(id);
        if (objectTipoMoneda.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(MessagesFunctions.notFound("del tipomoneda"));
        }

        List<Object> newList = isUpdatable(tipomonedaDto, objectTipoMoneda);
        if (newList.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_MODIFIED).body(MessagesFunctions.notModified("del tipomoneda"));
        }

        TipoMoneda tipomonedaDb = objectTipoMoneda.get();
        tipomonedaDb.setNombre(tipomonedaDto.getNombre());

        return super.update(tipomonedaDb);
    }


    private List<Object> isUpdatable(TipoMonedaDto tipomonedaDto, Optional<TipoMoneda> objectTipoMoneda) {
        List<Object> newList = new ArrayList<>();
        List<Object> dto = new ArrayList<>();
        List<Object> model = new ArrayList<>();

        dto.add(tipomonedaDto.getNombre());

        if (!objectTipoMoneda.isEmpty()) {
            model.add(objectTipoMoneda.get().getNombre());
        }

        for (Object element : model) {
            if (!dto.contains(element)) {
                newList.add(element);
            }
        }
        return newList;
    }
    
    protected ResponseEntity<?> validates(BindingResult result) {
		Map<String, Object> errores = new HashMap<>();
			result.getFieldErrors().forEach(err -> errores.put(err.getField(), "El campo " + err.getField() + " " + err.getDefaultMessage() )
		);
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errores);
	}

}
